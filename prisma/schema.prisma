// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FriendRequest {
  id Int @id @default(autoincrement())

  userId1 Int
  userId2 Int

  user1 User @relation("User1FriendRequests", fields: [userId1], references: [id])
  user2 User @relation("User2FriendRequests", fields: [userId2], references: [id])

  createdAt DateTime @default(now())
}

model Friend {
  id Int @id @default(autoincrement())

  userId1 Int
  userId2 Int

  user1 User @relation("User1Friends", fields: [userId1], references: [id])
  user2 User @relation("User2Friends", fields: [userId2], references: [id])

  createdAt DateTime @default(now())
}

model Post {
  id     Int    @id @default(autoincrement())
  postId String @unique @default(uuid())

  content String  @db.VarChar(1000)
  visible Boolean @default(true)

  user     User @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfilePicture {
  id               Int    @id @default(autoincrement())
  profilePictureId String @unique @default(uuid())

  url      String @db.VarChar(255)
  fileType String @db.VarChar(50)
  size     Int
  key      String @db.VarChar(255)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int    @id @default(autoincrement())
  profileId String @unique @default(uuid())

  firstName    String  @db.VarChar(100)
  lastName     String  @db.VarChar(100)
  bio          String? @db.VarChar(1000)
  publicAccess Boolean @default(false) @db.Boolean()

  user         User            @relation(fields: [userId], references: [id])
  userId       Int             @unique
  profilePhoto ProfilePicture? @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id     Int    @id @default(autoincrement())
  userId String @unique @default(uuid())

  email    String   @unique @db.VarChar(255)
  password String
  profile  Profile?
  posts    Post[]

  sentFriendRequests     FriendRequest[] @relation("User1FriendRequests")
  receivedFriendRequests FriendRequest[] @relation("User2FriendRequests")
  friendsAsUser1         Friend[]        @relation("User1Friends")
  friendsAsUser2         Friend[]        @relation("User2Friends")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
